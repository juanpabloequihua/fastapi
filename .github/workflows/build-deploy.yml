name: Build and Deploy code

on: 
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  job1:
    environment: Testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
    # We need to initialize database access as a dockerized service:   
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps: 
      - name: Pulling git repo
        uses: actions/checkout@v2
      - name: Install python version 3.9
        uses: actions/setup-python@v2
        with: 
          python-version: '3.9'
      - name:
        run: python -m pip install --upgrade pip
      - name: Install dependendencies
        run: pip install -r requirements.txt
      - name: Unit testing code
        run: |
          pip install pytest
          pytest
      ## Loging into Docker to push new image:
      - name: Loging to Docker hub
        uses: docker/login-action@v1
        with: 
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_ACCESS_TOKEN}}
      
      # Push image to docker hub
      - name: Setup Docker BuildX
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build docker and Push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{steps.buildx.outputs.name}}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME}}/fastapi:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          
      - name: Image Digest
        run: echo ${{ steps.docker_build.outputs.digest }}
